package models

import (
	"context"
	"github.com/mark3labs/mcp-go/mcp"
)

type Tool struct {
	Definition mcp.Tool
	Handler    func(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error)
}

// JobNotification represents the JobNotification schema from the OpenAPI specification
type JobNotification struct {
	Pubsubtopic string `json:"pubsubTopic,omitempty"` // The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.
	Message Message `json:"message,omitempty"` // Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.
}

// CancelOperationRequest represents the CancelOperationRequest schema from the OpenAPI specification
type CancelOperationRequest struct {
}

// InstancePolicy represents the InstancePolicy schema from the OpenAPI specification
type InstancePolicy struct {
	Provisioningmodel string `json:"provisioningModel,omitempty"` // The provisioning model.
	Reservation string `json:"reservation,omitempty"` // Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation.
	Accelerators []Accelerator `json:"accelerators,omitempty"` // The accelerators attached to each VM instance.
	Bootdisk Disk `json:"bootDisk,omitempty"` // A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
	Disks []AttachedDisk `json:"disks,omitempty"` // Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.
	Machinetype string `json:"machineType,omitempty"` // The Compute Engine machine type.
	Mincpuplatform string `json:"minCpuPlatform,omitempty"` // The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
}

// CloudLoggingOption represents the CloudLoggingOption schema from the OpenAPI specification
type CloudLoggingOption struct {
	Usegenerictaskmonitoredresource bool `json:"useGenericTaskMonitoredResource,omitempty"` // Optional. Set this flag to true to change the [monitored resource type](https://cloud.google.com/monitoring/api/resources) for Cloud Logging logs generated by this Batch job from the [`batch.googleapis.com/Job`](https://cloud.google.com/monitoring/api/resources#tag_batch.googleapis.com/Job) type to the formerly used [`generic_task`](https://cloud.google.com/monitoring/api/resources#tag_generic_task) type.
}

// ListTasksResponse represents the ListTasksResponse schema from the OpenAPI specification
type ListTasksResponse struct {
	Tasks []Task `json:"tasks,omitempty"` // Tasks.
	Unreachable []string `json:"unreachable,omitempty"` // Locations that could not be reached.
	Nextpagetoken string `json:"nextPageToken,omitempty"` // Next page token.
}

// Script represents the Script schema from the OpenAPI specification
type Script struct {
	Path string `json:"path,omitempty"` // Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be executed by `/bin/sh`.
	Text string `json:"text,omitempty"` // Shell script text. To specify an interpreter, please add a `#!\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\n` should be added.) Otherwise, the script will by default be executed by `/bin/sh`.
}

// GCS represents the GCS schema from the OpenAPI specification
type GCS struct {
	Remotepath string `json:"remotePath,omitempty"` // Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/
}

// ServiceAccount represents the ServiceAccount schema from the OpenAPI specification
type ServiceAccount struct {
	Email string `json:"email,omitempty"` // Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.
	Scopes []string `json:"scopes,omitempty"` // List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.
}

// ListLocationsResponse represents the ListLocationsResponse schema from the OpenAPI specification
type ListLocationsResponse struct {
	Locations []Location `json:"locations,omitempty"` // A list of locations that matches the specified filter in the request.
	Nextpagetoken string `json:"nextPageToken,omitempty"` // The standard List next-page token.
}

// TaskStatus represents the TaskStatus schema from the OpenAPI specification
type TaskStatus struct {
	State string `json:"state,omitempty"` // Task state
	Statusevents []StatusEvent `json:"statusEvents,omitempty"` // Detailed info about why the state is reached.
}

// AgentKMSEnvMap represents the AgentKMSEnvMap schema from the OpenAPI specification
type AgentKMSEnvMap struct {
	Ciphertext string `json:"cipherText,omitempty"` // The value of the cipherText response from the `encrypt` method.
	Keyname string `json:"keyName,omitempty"` // The name of the KMS key that will be used to decrypt the cipher text.
}

// AgentTaskRunnable represents the AgentTaskRunnable schema from the OpenAPI specification
type AgentTaskRunnable struct {
	Alwaysrun bool `json:"alwaysRun,omitempty"` // By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
	Background bool `json:"background,omitempty"` // This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
	Container AgentContainer `json:"container,omitempty"` // Container runnable representation on the agent side.
	Environment AgentEnvironment `json:"environment,omitempty"` // AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.
	Ignoreexitstatus bool `json:"ignoreExitStatus,omitempty"` // Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
	Script AgentScript `json:"script,omitempty"` // Script runnable representation on the agent side.
	Timeout string `json:"timeout,omitempty"` // Timeout for this Runnable.
}

// Status represents the Status schema from the OpenAPI specification
type Status struct {
	Details []map[string]interface{} `json:"details,omitempty"` // A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Message string `json:"message,omitempty"` // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Code int `json:"code,omitempty"` // The status code, which should be an enum value of google.rpc.Code.
}

// AllocationPolicy represents the AllocationPolicy schema from the OpenAPI specification
type AllocationPolicy struct {
	Location LocationPolicy `json:"location,omitempty"`
	Network NetworkPolicy `json:"network,omitempty"` // NetworkPolicy describes VM instance network configurations.
	Placement PlacementPolicy `json:"placement,omitempty"` // PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.
	Serviceaccount ServiceAccount `json:"serviceAccount,omitempty"` // Carries information about a Google Cloud service account.
	Tags []string `json:"tags,omitempty"` // Optional. Tags applied to the VM instances. The tags identify valid sources or targets for network firewalls. Each tag must be 1-63 characters long, and comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
	Instances []InstancePolicyOrTemplate `json:"instances,omitempty"` // Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.
	Labels map[string]interface{} `json:"labels,omitempty"` // Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
}

// StatusEvent represents the StatusEvent schema from the OpenAPI specification
type StatusEvent struct {
	TypeField string `json:"type,omitempty"` // Type of the event.
	Description string `json:"description,omitempty"` // Description of the event.
	Eventtime string `json:"eventTime,omitempty"` // The time this event occurred.
	Taskexecution TaskExecution `json:"taskExecution,omitempty"` // This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.
	Taskstate string `json:"taskState,omitempty"` // Task State
}

// Empty represents the Empty schema from the OpenAPI specification
type Empty struct {
}

// Job represents the Job schema from the OpenAPI specification
type Job struct {
	Priority string `json:"priority,omitempty"` // Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
	Taskgroups []TaskGroup `json:"taskGroups,omitempty"` // Required. TaskGroups in the Job. Only one TaskGroup is supported now.
	Labels map[string]interface{} `json:"labels,omitempty"` // Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
	Notifications []JobNotification `json:"notifications,omitempty"` // Notification configurations.
	Uid string `json:"uid,omitempty"` // Output only. A system generated unique ID for the Job.
	Status JobStatus `json:"status,omitempty"` // Job status.
	Updatetime string `json:"updateTime,omitempty"` // Output only. The last time the Job was updated.
	Createtime string `json:"createTime,omitempty"` // Output only. When the Job was created.
	Name string `json:"name,omitempty"` // Output only. Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
	Allocationpolicy AllocationPolicy `json:"allocationPolicy,omitempty"` // A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
	Logspolicy LogsPolicy `json:"logsPolicy,omitempty"` // LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
}

// AgentTaskUserAccount represents the AgentTaskUserAccount schema from the OpenAPI specification
type AgentTaskUserAccount struct {
	Gid string `json:"gid,omitempty"` // gid id an unique identifier of the POSIX account group corresponding to the user account.
	Uid string `json:"uid,omitempty"` // uid is an unique identifier of the POSIX account corresponding to the user account.
}

// AgentTaskInfo represents the AgentTaskInfo schema from the OpenAPI specification
type AgentTaskInfo struct {
	Runnable string `json:"runnable,omitempty"` // The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined.
	Taskid string `json:"taskId,omitempty"` // ID of the Task
	Taskstatus TaskStatus `json:"taskStatus,omitempty"` // Status of a task
}

// ComputeResource represents the ComputeResource schema from the OpenAPI specification
type ComputeResource struct {
	Bootdiskmib string `json:"bootDiskMib,omitempty"` // Extra boot disk size in MiB for each task.
	Cpumilli string `json:"cpuMilli,omitempty"` // The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.
	Memorymib string `json:"memoryMib,omitempty"` // Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less.
}

// LocationPolicy represents the LocationPolicy schema from the OpenAPI specification
type LocationPolicy struct {
	Allowedlocations []string `json:"allowedLocations,omitempty"` // A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, ["regions/us-central1"] allow VMs in any zones in region us-central1. ["zones/us-central1-a", "zones/us-central1-c"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b", "zones/us-west1-a"] contains 2 regions "us-central1" and "us-west1". An error is expected in this case.
}

// AttachedDisk represents the AttachedDisk schema from the OpenAPI specification
type AttachedDisk struct {
	Devicename string `json:"deviceName,omitempty"` // Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes.
	Existingdisk string `json:"existingDisk,omitempty"` // Name of an existing PD.
	Newdisk Disk `json:"newDisk,omitempty"` // A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
}

// AgentMetadata represents the AgentMetadata schema from the OpenAPI specification
type AgentMetadata struct {
	Zone string `json:"zone,omitempty"` // Agent zone.
	Instanceid string `json:"instanceId,omitempty"` // GCP instance ID (go/instance-id).
	Version string `json:"version,omitempty"` // agent binary version running on VM
	Creator string `json:"creator,omitempty"` // Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of "created-by".
	Imageversion string `json:"imageVersion,omitempty"` // image version for the VM that this agent is installed on.
	Osrelease map[string]interface{} `json:"osRelease,omitempty"` // parsed contents of /etc/os-release
	Creationtime string `json:"creationTime,omitempty"` // When the VM agent started. Use agent_startup_time instead.
	Instance string `json:"instance,omitempty"` // GCP instance name (go/instance-name).
	Instancepreemptionnoticereceived bool `json:"instancePreemptionNoticeReceived,omitempty"` // If the GCP instance has received preemption notice.
}

// InstancePolicyOrTemplate represents the InstancePolicyOrTemplate schema from the OpenAPI specification
type InstancePolicyOrTemplate struct {
	Installgpudrivers bool `json:"installGpuDrivers,omitempty"` // Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
	Instancetemplate string `json:"instanceTemplate,omitempty"` // Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.
	Policy InstancePolicy `json:"policy,omitempty"` // InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
}

// AgentTimingInfo represents the AgentTimingInfo schema from the OpenAPI specification
type AgentTimingInfo struct {
	Boottime string `json:"bootTime,omitempty"` // Boot timestamp of the VM OS
	Scriptstartuptime string `json:"scriptStartupTime,omitempty"` // Startup time of the Batch VM script.
	Agentstartuptime string `json:"agentStartupTime,omitempty"` // Agent startup time
}

// Location represents the Location schema from the OpenAPI specification
type Location struct {
	Locationid string `json:"locationId,omitempty"` // The canonical id for this location. For example: `"us-east1"`.
	Metadata map[string]interface{} `json:"metadata,omitempty"` // Service-specific metadata. For example the available capacity at the given location.
	Name string `json:"name,omitempty"` // Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
	Displayname string `json:"displayName,omitempty"` // The friendly name for this location, typically a nearby city name. For example, "Tokyo".
	Labels map[string]interface{} `json:"labels,omitempty"` // Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
}

// AgentScript represents the AgentScript schema from the OpenAPI specification
type AgentScript struct {
	Path string `json:"path,omitempty"` // Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be executed by `/bin/sh`.
	Text string `json:"text,omitempty"` // Shell script text. To specify an interpreter, please add a `#!\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\n` should be added.) Otherwise, the script will by default be executed by `/bin/sh`.
}

// NFS represents the NFS schema from the OpenAPI specification
type NFS struct {
	Remotepath string `json:"remotePath,omitempty"` // Remote source path exported from the NFS, e.g., "/share".
	Server string `json:"server,omitempty"` // The IP address of the NFS.
}

// Message represents the Message schema from the OpenAPI specification
type Message struct {
	Newtaskstate string `json:"newTaskState,omitempty"` // The new task state.
	TypeField string `json:"type,omitempty"` // The message type.
	Newjobstate string `json:"newJobState,omitempty"` // The new job state.
}

// OperationMetadata represents the OperationMetadata schema from the OpenAPI specification
type OperationMetadata struct {
	Apiversion string `json:"apiVersion,omitempty"` // Output only. API version used to start the operation.
	Createtime string `json:"createTime,omitempty"` // Output only. The time the operation was created.
	Endtime string `json:"endTime,omitempty"` // Output only. The time the operation finished running.
	Requestedcancellation bool `json:"requestedCancellation,omitempty"` // Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
	Statusmessage string `json:"statusMessage,omitempty"` // Output only. Human-readable status of the operation, if any.
	Target string `json:"target,omitempty"` // Output only. Server-defined resource path for the target of the operation.
	Verb string `json:"verb,omitempty"` // Output only. Name of the verb executed by the operation.
}

// KMSEnvMap represents the KMSEnvMap schema from the OpenAPI specification
type KMSEnvMap struct {
	Keyname string `json:"keyName,omitempty"` // The name of the KMS key that will be used to decrypt the cipher text.
	Ciphertext string `json:"cipherText,omitempty"` // The value of the cipherText response from the `encrypt` method.
}

// Task represents the Task schema from the OpenAPI specification
type Task struct {
	Name string `json:"name,omitempty"` // Task name. The name is generated from the parent TaskGroup name and 'id' field. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".
	Status TaskStatus `json:"status,omitempty"` // Status of a task
}

// ActionCondition represents the ActionCondition schema from the OpenAPI specification
type ActionCondition struct {
	Exitcodes []int `json:"exitCodes,omitempty"` // Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.
}

// Environment represents the Environment schema from the OpenAPI specification
type Environment struct {
	Encryptedvariables KMSEnvMap `json:"encryptedVariables,omitempty"`
	Secretvariables map[string]interface{} `json:"secretVariables,omitempty"` // A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
	Variables map[string]interface{} `json:"variables,omitempty"` // A map of environment variable names to values.
}

// NetworkInterface represents the NetworkInterface schema from the OpenAPI specification
type NetworkInterface struct {
	Network string `json:"network,omitempty"` // The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}
	Noexternalipaddress bool `json:"noExternalIpAddress,omitempty"` // Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.
	Subnetwork string `json:"subnetwork,omitempty"` // The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}
}

// Container represents the Container schema from the OpenAPI specification
type Container struct {
	Password string `json:"password,omitempty"` // Required if the container image is from a private Docker registry. The password to login to the Docker registry that contains the image. For security, it is strongly recommended to specify an encrypted password by using a Secret Manager secret: `projects/*/secrets/*/versions/*`. Warning: If you specify the password using plain text, you risk the password being exposed to any users who can view the job or its logs. To avoid this risk, specify a secret that contains the password instead. Learn more about [Secret Manager](https://cloud.google.com/secret-manager/docs/) and [using Secret Manager with Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).
	Volumes []string `json:"volumes,omitempty"` // Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro If the `TaskSpec.Volumes` field is specified but this field is not, Batch will mount each volume from the host machine to the container with the same mount path by default. In this case, the default mount option for containers will be read-only (ro) for existing persistent disks and read-write (rw) for other volume types, regardless of the original mount options specified in `TaskSpec.Volumes`. If you need different mount settings, you can explicitly configure them in this field.
	Entrypoint string `json:"entrypoint,omitempty"` // Overrides the `ENTRYPOINT` specified in the container.
	Imageuri string `json:"imageUri,omitempty"` // The URI to pull the container image from.
	Commands []string `json:"commands,omitempty"` // Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
	Enableimagestreaming bool `json:"enableImageStreaming,omitempty"` // Optional. If set to true, this container runnable uses Image streaming. Use Image streaming to allow the runnable to initialize without waiting for the entire container image to download, which can significantly reduce startup time for large container images. When `enableImageStreaming` is set to true, the container runtime is [containerd](https://containerd.io/) instead of Docker. Additionally, this container runnable only supports the following `container` subfields: `imageUri`, `commands[]`, `entrypoint`, and `volumes[]`; any other `container` subfields are ignored. For more information about the requirements and limitations for using Image streaming with Batch, see the [`image-streaming` sample on GitHub](https://github.com/GoogleCloudPlatform/batch-samples/tree/main/api-samples/image-streaming).
	Options string `json:"options,omitempty"` // Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
	Username string `json:"username,omitempty"` // Required if the container image is from a private Docker registry. The username to login to the Docker registry that contains the image. You can either specify the username directly by using plain text or specify an encrypted username by using a Secret Manager secret: `projects/*/secrets/*/versions/*`. However, using a secret is recommended for enhanced security. Caution: If you specify the username using plain text, you risk the username being exposed to any users who can view the job or its logs. To avoid this risk, specify a secret that contains the username instead. Learn more about [Secret Manager](https://cloud.google.com/secret-manager/docs/) and [using Secret Manager with Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).
	Blockexternalnetwork bool `json:"blockExternalNetwork,omitempty"` // If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.
}

// LifecyclePolicy represents the LifecyclePolicy schema from the OpenAPI specification
type LifecyclePolicy struct {
	Action string `json:"action,omitempty"` // Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.
	Actioncondition ActionCondition `json:"actionCondition,omitempty"` // Conditions for actions to deal with task failures.
}

// InstanceStatus represents the InstanceStatus schema from the OpenAPI specification
type InstanceStatus struct {
	Provisioningmodel string `json:"provisioningModel,omitempty"` // The VM instance provisioning model.
	Taskpack string `json:"taskPack,omitempty"` // The max number of tasks can be assigned to this instance type.
	Bootdisk Disk `json:"bootDisk,omitempty"` // A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
	Machinetype string `json:"machineType,omitempty"` // The Compute Engine machine type.
}

// TaskGroup represents the TaskGroup schema from the OpenAPI specification
type TaskGroup struct {
	Name string `json:"name,omitempty"` // Output only. TaskGroup name. The system generates this field based on parent Job name. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
	Permissivessh bool `json:"permissiveSsh,omitempty"` // When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
	Requirehostsfile bool `json:"requireHostsFile,omitempty"` // When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false. The host file supports up to 1000 VMs.
	Runasnonroot bool `json:"runAsNonRoot,omitempty"` // Optional. If not set or set to false, Batch uses the root user to execute runnables. If set to true, Batch runs the runnables using a non-root user. Currently, the non-root user Batch used is generated by OS Login. For more information, see [About OS Login](https://cloud.google.com/compute/docs/oslogin).
	Taskcountpernode string `json:"taskCountPerNode,omitempty"` // Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
	Parallelism string `json:"parallelism,omitempty"` // Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.
	Schedulingpolicy string `json:"schedulingPolicy,omitempty"` // Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
	Taskcount string `json:"taskCount,omitempty"` // Number of Tasks in the TaskGroup. Default is 1.
	Taskenvironments []Environment `json:"taskEnvironments,omitempty"` // An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).
	Taskspec TaskSpec `json:"taskSpec,omitempty"` // Spec of a task
}

// TaskSpec represents the TaskSpec schema from the OpenAPI specification
type TaskSpec struct {
	Computeresource ComputeResource `json:"computeResource,omitempty"` // Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other.
	Environment Environment `json:"environment,omitempty"` // An Environment describes a collection of environment variables to set when executing Tasks.
	Environments map[string]interface{} `json:"environments,omitempty"` // Deprecated: please use environment(non-plural) instead.
	Lifecyclepolicies []LifecyclePolicy `json:"lifecyclePolicies,omitempty"` // Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
	Maxretrycount int `json:"maxRetryCount,omitempty"` // Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
	Maxrunduration string `json:"maxRunDuration,omitempty"` // Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
	Runnables []Runnable `json:"runnables,omitempty"` // The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
	Volumes []Volume `json:"volumes,omitempty"` // Volumes to mount before running Tasks using this TaskSpec.
}

// TaskExecution represents the TaskExecution schema from the OpenAPI specification
type TaskExecution struct {
	Exitcode int `json:"exitCode,omitempty"` // When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.
}

// AgentTaskSpec represents the AgentTaskSpec schema from the OpenAPI specification
type AgentTaskSpec struct {
	Useraccount AgentTaskUserAccount `json:"userAccount,omitempty"` // AgentTaskUserAccount contains the information of a POSIX account on the guest os which is used to execute the runnables.
	Environment AgentEnvironment `json:"environment,omitempty"` // AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.
	Maxrunduration string `json:"maxRunDuration,omitempty"` // Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
	Runnables []AgentTaskRunnable `json:"runnables,omitempty"` // AgentTaskRunnable is runanbles that will be executed on the agent.
}

// AgentContainer represents the AgentContainer schema from the OpenAPI specification
type AgentContainer struct {
	Commands []string `json:"commands,omitempty"` // Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
	Entrypoint string `json:"entrypoint,omitempty"` // Overrides the `ENTRYPOINT` specified in the container.
	Imageuri string `json:"imageUri,omitempty"` // The URI to pull the container image from.
	Options string `json:"options,omitempty"` // Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
	Volumes []string `json:"volumes,omitempty"` // Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
}

// AgentTask represents the AgentTask schema from the OpenAPI specification
type AgentTask struct {
	Spec TaskSpec `json:"spec,omitempty"` // Spec of a task
	Status TaskStatus `json:"status,omitempty"` // Status of a task
	Task string `json:"task,omitempty"` // Task name.
	Tasksource string `json:"taskSource,omitempty"` // TaskSource represents the source of the task.
	Agenttaskspec AgentTaskSpec `json:"agentTaskSpec,omitempty"` // AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.
	Intendedstate string `json:"intendedState,omitempty"` // The intended state of the task.
	Reachedbarrier string `json:"reachedBarrier,omitempty"` // The highest barrier reached by all tasks in the task's TaskGroup.
}

// ReportAgentStateRequest represents the ReportAgentStateRequest schema from the OpenAPI specification
type ReportAgentStateRequest struct {
	Agenttiminginfo AgentTimingInfo `json:"agentTimingInfo,omitempty"` // VM timing information
	Metadata AgentMetadata `json:"metadata,omitempty"` // VM Agent Metadata.
	Agentinfo AgentInfo `json:"agentInfo,omitempty"` // VM Agent Info.
}

// AgentInfo represents the AgentInfo schema from the OpenAPI specification
type AgentInfo struct {
	State string `json:"state,omitempty"` // Agent state.
	Taskgroupid string `json:"taskGroupId,omitempty"` // The assigned task group ID.
	Tasks []AgentTaskInfo `json:"tasks,omitempty"` // Task Info.
	Jobid string `json:"jobId,omitempty"` // Optional. The assigned Job ID
	Reporttime string `json:"reportTime,omitempty"` // When the AgentInfo is generated.
}

// ListOperationsResponse represents the ListOperationsResponse schema from the OpenAPI specification
type ListOperationsResponse struct {
	Nextpagetoken string `json:"nextPageToken,omitempty"` // The standard List next-page token.
	Operations []Operation `json:"operations,omitempty"` // A list of operations that matches the specified filter in the request.
}

// Accelerator represents the Accelerator schema from the OpenAPI specification
type Accelerator struct {
	Count string `json:"count,omitempty"` // The number of accelerators of this type.
	Driverversion string `json:"driverVersion,omitempty"` // Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as "470.103.01", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.
	Installgpudrivers bool `json:"installGpuDrivers,omitempty"` // Deprecated: please use instances[0].install_gpu_drivers instead.
	TypeField string `json:"type,omitempty"` // The accelerator type. For example, "nvidia-tesla-t4". See `gcloud compute accelerator-types list`.
}

// Barrier represents the Barrier schema from the OpenAPI specification
type Barrier struct {
	Name string `json:"name,omitempty"` // Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.
}

// Disk represents the Disk schema from the OpenAPI specification
type Disk struct {
	Snapshot string `json:"snapshot,omitempty"` // Name of a snapshot used as the data source. Snapshot is not supported as boot disk now.
	TypeField string `json:"type,omitempty"` // Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type "local-ssd". Persistent disks and boot disks use "pd-balanced", "pd-extreme", "pd-ssd" or "pd-standard".
	Diskinterface string `json:"diskInterface,omitempty"` // Local SSDs are available through both "SCSI" and "NVMe" interfaces. If not indicated, "NVMe" will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.
	Image string `json:"image,omitempty"` // URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images. * `batch-hpc-rocky`: use Batch HPC Rocky Linux images.
	Sizegb string `json:"sizeGb,omitempty"` // Disk size in GB. **Non-Boot Disk**: If the `type` specifies a persistent disk, this field is ignored if `data_source` is set as `image` or `snapshot`. If the `type` specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the `boot_disk_mib` field in task spec's `compute_resource` are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk's size when the `data_source` is set as `snapshot` or `image`. For example, if you set an image as the `data_source` field and the image's default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB.
}

// LogsPolicy represents the LogsPolicy schema from the OpenAPI specification
type LogsPolicy struct {
	Cloudloggingoption CloudLoggingOption `json:"cloudLoggingOption,omitempty"` // `CloudLoggingOption` contains additional settings for Cloud Logging logs generated by Batch job.
	Destination string `json:"destination,omitempty"` // Where logs should be saved.
	Logspath string `json:"logsPath,omitempty"` // The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.
}

// JobStatus represents the JobStatus schema from the OpenAPI specification
type JobStatus struct {
	State string `json:"state,omitempty"` // Job state
	Statusevents []StatusEvent `json:"statusEvents,omitempty"` // Job status events
	Taskgroups map[string]interface{} `json:"taskGroups,omitempty"` // Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.
	Runduration string `json:"runDuration,omitempty"` // The duration of time that the Job spent in status RUNNING.
}

// NetworkPolicy represents the NetworkPolicy schema from the OpenAPI specification
type NetworkPolicy struct {
	Networkinterfaces []NetworkInterface `json:"networkInterfaces,omitempty"` // Network configurations.
}

// TaskGroupStatus represents the TaskGroupStatus schema from the OpenAPI specification
type TaskGroupStatus struct {
	Counts map[string]interface{} `json:"counts,omitempty"` // Count of task in each state in the TaskGroup. The map key is task state name.
	Instances []InstanceStatus `json:"instances,omitempty"` // Status of instances allocated for the TaskGroup.
}

// Volume represents the Volume schema from the OpenAPI specification
type Volume struct {
	Devicename string `json:"deviceName,omitempty"` // Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.
	Gcs GCS `json:"gcs,omitempty"` // Represents a Google Cloud Storage volume.
	Mountoptions []string `json:"mountOptions,omitempty"` // For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).
	Mountpath string `json:"mountPath,omitempty"` // The mount path for the volume, e.g. /mnt/disks/share.
	Nfs NFS `json:"nfs,omitempty"` // Represents an NFS volume.
}

// Runnable represents the Runnable schema from the OpenAPI specification
type Runnable struct {
	Barrier Barrier `json:"barrier,omitempty"` // Barrier runnable blocks until all tasks in a taskgroup reach it.
	Environment Environment `json:"environment,omitempty"` // An Environment describes a collection of environment variables to set when executing Tasks.
	Script Script `json:"script,omitempty"` // Script runnable.
	Alwaysrun bool `json:"alwaysRun,omitempty"` // By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
	Container Container `json:"container,omitempty"` // Container runnable.
	Timeout string `json:"timeout,omitempty"` // Timeout for this Runnable.
	Background bool `json:"background,omitempty"` // This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
	Displayname string `json:"displayName,omitempty"` // Optional. DisplayName is an optional field that can be provided by the caller. If provided, it will be used in logs and other outputs to identify the script, making it easier for users to understand the logs. If not provided the index of the runnable will be used for outputs.
	Ignoreexitstatus bool `json:"ignoreExitStatus,omitempty"` // Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
	Labels map[string]interface{} `json:"labels,omitempty"` // Labels for this Runnable.
}

// ListJobsResponse represents the ListJobsResponse schema from the OpenAPI specification
type ListJobsResponse struct {
	Nextpagetoken string `json:"nextPageToken,omitempty"` // Next page token.
	Unreachable []string `json:"unreachable,omitempty"` // Locations that could not be reached.
	Jobs []Job `json:"jobs,omitempty"` // Jobs.
}

// PlacementPolicy represents the PlacementPolicy schema from the OpenAPI specification
type PlacementPolicy struct {
	Collocation string `json:"collocation,omitempty"` // UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.
	Maxdistance string `json:"maxDistance,omitempty"` // When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented
}

// AgentEnvironment represents the AgentEnvironment schema from the OpenAPI specification
type AgentEnvironment struct {
	Encryptedvariables AgentKMSEnvMap `json:"encryptedVariables,omitempty"` // AgentKMSEnvMap contains the encrypted key/value pair to be used in the environment on the Agent side.
	Secretvariables map[string]interface{} `json:"secretVariables,omitempty"` // A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
	Variables map[string]interface{} `json:"variables,omitempty"` // A map of environment variable names to values.
}

// Operation represents the Operation schema from the OpenAPI specification
type Operation struct {
	Response map[string]interface{} `json:"response,omitempty"` // The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Done bool `json:"done,omitempty"` // If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	ErrorField Status `json:"error,omitempty"` // The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Metadata map[string]interface{} `json:"metadata,omitempty"` // Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Name string `json:"name,omitempty"` // The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
}

// ReportAgentStateResponse represents the ReportAgentStateResponse schema from the OpenAPI specification
type ReportAgentStateResponse struct {
	Minreportinterval string `json:"minReportInterval,omitempty"` // Minimum report interval override
	Tasks []AgentTask `json:"tasks,omitempty"` // Tasks assigned to the agent
	Usebatchmonitoredresource bool `json:"useBatchMonitoredResource,omitempty"` // If true, the cloud logging for batch agent will use batch.googleapis.com/Job as monitored resource for Batch job related logging.
	Defaultreportinterval string `json:"defaultReportInterval,omitempty"` // Default report interval override
}
